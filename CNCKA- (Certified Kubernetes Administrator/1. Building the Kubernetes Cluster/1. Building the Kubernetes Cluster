Building the Kubernetes Cluster :
================================
Installing and Testing the Components of a Kubernetes Cluster:
===============================================================
Introduction
We have need three nodes, in which we must install the components necessary to build a running Kubernetes cluster. Once the cluster has been built and we have verified all nodes are in the ready status, we need to start testing deployments, pods, services, and port forwarding, as well as executing commands from a pod.

Solution
---------
Log in to all three servers.


Get the Docker gpg, and add it to your repository.
In all three terminals, run the following command to get the Docker gpg key:
-----------------------------------------------------------------------------
#curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

Then add it to your repository:
--------------------------------
#sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

Get the Kubernetes gpg key, and add it to your repository.
In all three terminals, run the following command to get the Kubernetes gpg key:
---------------------------------------------------------------------------------
#curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -

Then add it to your repository:
-------------------------------
#cat << EOF | sudo tee /etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF

Update the packages:
--------------------
#sudo apt-get update

Install Docker, kubelet, kubeadm, and kubectl.
In all three terminals, run the following command to install Docker, kubelet, kubeadm, and kubectl:
----------------------------------------------------------------------------------------------------
#sudo apt-get install -y docker-ce=18.06.1~ce~3-0~ubuntu kubelet=1.13.5-00 kubeadm=1.13.5-00 kubectl=1.13.5-00

Initialize the Kubernetes cluster.
In the Controller server terminal, run the following command to initialize the cluster using kubeadm:
-----------------------------------------------------------------------------------------------------
sudo kubeadm init --pod-network-cidr=10.244.0.0/16

Set up local kubeconfig.
In the Controller server terminal, run the following commands to set up local kubeconfig:
-----------------------------------------------------------------------------------------
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

Apply the flannel CNI plugin as a network overlay.
In the Controller server terminal, run the following command to apply flannel:
-------------------------------------------------------------------------------
#kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/bc79dd1505b0c8681ece4de4c0d86c5cd2643275/Documentation/kube-flannel.yml

Join the worker nodes to the cluster, and verify they have joined successfully.
In the worker node terminals, run the following command to join the worker nodes to the cluster (use the unique string in the kubeadm join included in the output of kubeadm init in the Controller terminal):
-------------------------
#sudo kubeadm join <your unique string from the output of kubeadm init>

Run a deployment that includes at least one pod, and verify it was successful.
In the Controller server terminal, run the following command to run a deployment of ngnix:
------------------------------------------------------------------------------------------
#kubectl run nginx --image=nginx

Verify its success:
--------------------
#kubectl get deployments

Verify the pod is running and available.
In the Controller server terminal, run the following command to verify the pod is up and running:
--------------------------------------------------------------------------------------------------
#kubectl get pods

Use port forwarding to extend port 80 to 8081, and verify access to the pod directly.
In the Controller server terminal, run the following command to forward the container port 80 to 8081 (replace <pod_name> with the name in the output from the previous command):
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#kubectl port-forward <pod_name> 8081:80

Open a new terminal session and log in to the Controller server. Then, run this command to verify we can access this container directly:
-------------------------------------------------------------------------------------------------------------------------------------------
#curl --head http://127.0.0.1:8081

We should see a status of OK.

Execute a command directly on a pod.
In the original Controller server terminal, hit Ctrl+C to exit out of the running program.
Still in Controller, execute the nginx version command from a pod (using the same <pod_name> as before):
---------------------------------------------------------------------------------------------------------
#kubectl exec -it <pod_name> -- nginx -v

Create a service, and verify connectivity on the node port.
In the original Controller server terminal, run the following command to create a NodePort service:
---------------------------------------------------------------------------------------------------
#kubectl expose deployment nginx --port 80 --type NodePort

View the service:
-----------------
#kubectl get services

In one of the worker node terminals, verify its connectivity (get the $node_port number from the PORT(S) column of the above service output):
----------------------------------------------------------------------------------------------------------------------------------------------
#curl -I localhost:$node_port
We should see a status of OK.